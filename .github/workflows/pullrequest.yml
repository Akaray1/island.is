name: Monorepo pipeline - pull request

on:
  pull_request: {}
  workflow_dispatch: {}

defaults:
  run:
    shell: bash

concurrency:
  # See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value
  group: pullrequest-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  COMPOSE_HTTP_TIMEOUT: 180
  SKIP_GENERATED_CACHE: ${{ contains(github.event.pull_request.labels.*.name, 'skip-generated-cache') }}
  CYPRESS_CACHE_DIR: ${{ github.workspace }}/.cypress

jobs:
  prepare:
    runs-on: ec2-runners
    container:
      image: ${{ vars.EC2_IMAGE }}
    timeout-minutes: 35

    env:
      AFFECTED_ALL: ${{ secrets.AFFECTED_ALL }}
      CHUNK_SIZE: 7
      SERVERSIDE_FEATURES_ON: ''

    outputs:
      # Don't cause a syntax error during JSON parsing if the relevant steps fail producing outputs
      BUILD_CHUNKS: "${{ steps.build_projects.outputs.CHUNKS && steps.build_projects.outputs.CHUNKS || '{}' }}"
      E2E_CHUNKS: "${{ steps.e2e_projects.outputs.CHUNKS && steps.e2e_projects.outputs.CHUNKS || '{}' }}"
      LINT_CHUNKS: "${{ steps.lint_projects.outputs.CHUNKS && steps.lint_projects.outputs.CHUNKS || '{}' }}"
      TEST_CHUNKS: "${{ steps.test_projects.outputs.CHUNKS && steps.test_projects.outputs.CHUNKS || '{}' }}"
      BUILD_MAP: ${{ steps.build_map.outputs.BUILD_MAP }}
      E2E_BUILD_ID: ${{ steps.e2e_projects.outputs.BUILD_ID }}
      UNAFFECTED: ${{ steps.unaffected.outputs.UNAFFECTED }}
      node-modules-hash: ${{ steps.calculate_node_modules_hash.outputs.node-modules-hash }}
      generated-files-cache-key: ${{ steps.calculate_generated_files_cache_key.outputs.generated-files-cache-key }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Debug environment and user
        run: |
          mkdir -p "$HOME" || true
          echo "id: $(id)"
          echo "whoami: $(whoami)"
          echo "HOME: $HOME"
          echo "PWD: $PWD"
          echo "Homedir permissions: $(ls -lahd $HOME)"

      - uses: actions/setup-node@v3
        with:
          node-version: '18.8.0'

      - name: Check node version
        run: |
          echo "node version: $(node -v)"
          echo "node binary location:"
          ls -l "$(which node)"
          echo "yarn version: $(yarn --version)"

      - name: Checking out relevant branches
        run: |
          set -x
          set -euo pipefail
          export GITHUB_BASE_REF GITHUB_HEAD_REF GITHUB_SHA
          git config --global advice.detachedHead "false"
          git config --global user.email "ci@island.is"
          git config --global user.name "CI Bot"
          git checkout -f "$GITHUB_HEAD_REF" # GITHUB_HEAD_REF
          git checkout -f "$GITHUB_BASE_REF" # GITHUB_BASE_REF
          git checkout -f "$GITHUB_SHA" # GITHUB_SHA

          BASE_SHA=$(git merge-base HEAD $GITHUB_BASE_REF)
          HEAD_SHA=$(git merge-base HEAD $GITHUB_HEAD_REF)
          echo Current base SHA is $BASE_SHA and head SHA is $HEAD_SHA
          echo "{\"base_sha\": \"$BASE_SHA\", \"head_sha\":\"$HEAD_SHA\"}" > event.json

      - name: Keep PR run event
        uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: pr-event
          path: event.json
          retention-days: 60

      - name: Calculate cache key for node modules
        id: calculate_node_modules_hash
        run: |
          PACKAGE_JSON_HASH=$(cat package.json | jq '{resolutions,dependencies,devDependencies}' | sha1sum -t | cut -f1 -d" ")
          echo "PACKAGE_JSON_HASH: $PACKAGE_JSON_HASH"
          export NODE_MODULES_HASH=${{ runner.os }}-${{ hashFiles('yarn.lock') }}-$PACKAGE_JSON_HASH
          echo "NODE_MODULES_HASH: $NODE_MODULES_HASH"
          echo "node-modules-hash=$NODE_MODULES_HASH" >> $GITHUB_OUTPUT

      - name: Calculate cache keys for generated files
        id: calculate_generated_files_cache_key
        run: |
          export HASH=$(./scripts/_hash-generated-files.sh)
          export GENERATED_FILES_KEY=${{ runner.os }}-$HASH-files-generated
          echo "GENERATED_FILES_KEY: $GENERATED_FILES_KEY"
          echo "generated-files-cache-key=$GENERATED_FILES_KEY" >> $GITHUB_OUTPUT

      - name: Cache for NodeJS dependencies - host OS
        id: node-modules
        continue-on-error: true
        uses: ./.github/actions/cache
        with:
          path: node_modules
          key: ${{ steps.calculate_node_modules_hash.outputs.node-modules-hash }}-yarn

      - name: Check node-modules cache success
        run: '[[ "${{ steps.node-modules.outputs.success }}" != "false" ]] || exit 1'

      - name: Building NodeJS dependencies
        if: steps.node-modules.outputs.cache-hit != 'true'
        run: ./scripts/ci/10_prepare-host-deps.sh

      - name: Preparing HEAD and BASE tags
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HTML_URL: ${{ github.event.pull_request.html_url }}
          ISSUE_REPORTING_SLACK_WEBHOOK_URL: ${{ secrets.SLACK_BUILD_ISSUES_REPORTING_WEBHOOK_URL }}
        run: |
          set -x
          set -euo pipefail
          echo "HEAD=$GITHUB_SHA" >> $GITHUB_ENV
          export HEAD_REF="$GITHUB_HEAD_REF"
          export BASE_REF="$GITHUB_BASE_REF"
          export PR_REF="$GITHUB_SHA"
          export SHELL=/usr/bin/bash
          export WORKFLOW_ID=pullrequest
          source ./scripts/ci/00_prepare-base-tags.sh $(git merge-base HEAD "$GITHUB_BASE_REF")
          git checkout "$GITHUB_SHA" # GITHUB_SHA
          echo "BASE=$BASE" >> $GITHUB_ENV

      - name: Cache for generated files
        id: generated-files-cache
        continue-on-error: true
        uses: ./.github/actions/cache
        with:
          path: generated_files.tar.gz
          key: ${{ steps.calculate_generated_files_cache_key.outputs.generated-files-cache-key }}

      - name: Check generated files cache success
        run: '[[ "${{ steps.generated-files-cache.outputs.success }}" != "false" ]] || exit 1'

      - name: Run codegen
        if: steps.generated-files-cache.outputs.cache-hit != 'true' || env.SKIP_GENERATED_CACHE == 'true'
        run: |
          set -euo pipefail
          node --version
          touched_files="$(./scripts/ci/get-files-touched-by.sh yarn codegen --skip-cache)"
          realpathed_files="$(echo $touched_files | xargs realpath --relative-to $PWD)"
          tar zcvf generated_files.tar.gz $touched_files

      # - name: Security audit Node modules
      #   run: ./scripts/ci/20_security-audit.sh

  
  build:
    if: always()
    needs:
      - prepare
    runs-on: ec2-runners
    container:
      image: ${{ vars.EC2_IMAGE }}
    timeout-minutes: 35
    env:
      AFFECTED_PROJECTS: '["air-discount-scheme-backend","api","application-system-api","service-portal"]'
      MAX_JOBS: 2
    strategy:
      fail-fast: false
      matrix:
        projects:
          - ${{ fromJson(needs.prepare.outputs.BUILD_CHUNKS) }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache for NodeJS dependencies - host OS
        id: node-modules
        continue-on-error: true
        uses: ./.github/actions/cache
        with:
          path: node_modules
          key: ${{ needs.prepare.outputs.node-modules-hash }}-yarn

      - name: Check node-modules cache success
        run: '[[ "${{ steps.node-modules.outputs.success }}" != "false" ]] || exit 1'

      - name: Cache for generated files
        id: generated-files-cache
        continue-on-error: true
        uses: ./.github/actions/cache
        with:
          path: generated_files.tar.gz
          key: ${{ needs.prepare.outputs.generated-files-cache-key }}
      - name: Check generated-files cache success
        run: '[[ "${{ steps.generated-files-cache.outputs.success }}" != "false" ]] || exit 1'

      - name: Untar generated files
        run: tar zxvf generated_files.tar.gz

      - name: Building
        run: ./scripts/ci/run-in-parallel-native.sh build

  success:
    if: ${{ !cancelled() }}
    needs:
      - prepare
      - build
    runs-on: ec2-runners
    container:
      image: ${{ vars.EC2_IMAGE }}
    steps:
      - name: Check prepare success
        run: '[[ ${{ needs.prepare.result }} == "success" ]] || exit 1'
      - name: Check build success
        run: '[[ ${{ needs.build.result }} != "failure" ]] || exit 1'
      - name: Announce success
        run: echo "Build is successful"
